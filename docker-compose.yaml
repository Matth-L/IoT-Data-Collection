networks: 
    tig-network:
        driver: bridge

volumes:
    influxdb-data:
    grafana-data:
    shared-config: 

services:
    influxdb:
        container_name: influxdb
        image: influxdb:latest
        environment:
            - MQTT_PASSWORD=${MQTT_PASSWORD}
        ports:
            - 8086:8086
        networks:
            - tig-network
        volumes:
            - influxdb-data:/var/lib/influxdb
            - ./telegraf.conf:/etc/telegraf/telegraf.conf
            - ./startup_config.sh:/startup_config.sh  # Mount startup script
            - shared-config:/shared-config  # Shared volume for tokens
        healthcheck:
            test: ["CMD", "bash", "-c", "[ -f /shared-config/config_ready ]"]
            interval: 5s
            timeout: 5s
            retries: 12
            start_period: 10s
        entrypoint: ["/bin/bash", "-c", "sed 's/\r$//' startup_config.sh > scripts.sh && chmod +x /scripts.sh && /scripts.sh"]
        restart: always

    grafana:
        image: grafana/grafana:latest
        depends_on: 
            influxdb:
                condition: service_healthy
        container_name: grafana
        ports: 
            - 3000:3000
        environment:
            #grafana admin default login
            GF_SECURITY_ADMIN_USER: grafadmin
            GF_SECURITY_ADMIN_PASSWORD: grafpw
            # smtp login
            SMTP_HOST : ${SMTP_HOST}
            SMTP_PORT : ${SMTP_PORT}
            SMTP_USER : ${SMTP_USER}
            SMTP_USER_ID : ${SMTP_USER_ID}
            SMTP_USER_PW : ${SMTP_USER_PW}
        networks: 
            - tig-network
        volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana/conf/grafana.ini:/etc/grafana/grafana.ini
            # loading dashboard and alerting on startup
            - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards
            - ./grafana/provisioning:/etc/grafana/provisioning/ 
            # shared_config to load influx_token
            - shared-config:/shared-config 
            - ./extract_and_source.sh:/usr/local/bin/extract_and_source.sh  # Mount the script
        entrypoint: ["/bin/sh", "-c","sed 's/\r$//' /usr/local/bin/extract_and_source.sh > /tmp/scripts.sh && chmod +x /tmp/scripts.sh && /tmp/scripts.sh"]        
        restart: always

    telegraf:
        container_name: telegraf
        image: telegraf:latest
        depends_on: 
            influxdb:
                condition: service_healthy
        environment:
            HOST_NAME: "telegraf"
            INFLUXDB_HOST: "influxdb"
            INFLUXDB_PORT: "8086"
            DATABASE: "iot"
            MQTT_PASSWORD: ${MQTT_PASSWORD}
        volumes:
            - ./telegraf.conf:/etc/telegraf/telegraf.conf
            - shared-config:/shared-config  # Mount the shared volume
        entrypoint: ["/bin/bash", "-c", "source /shared-config/influx_env.sh && telegraf"]
        tty: true
        networks: 
            - tig-network
        privileged: true
        restart: always

    alertbot:
        container_name: alertbot
        build: ./alertbot  # Path to your Flask+Discord bot Dockerfile
        ports:
            - "5000:5000"  # Expose Flask webhook
        networks:
            - tig-network
        environment:
            DISCORD_TOKEN: ${DISCORD_TOKEN}
            DISCORD_CHANNEL_ID: ${DISCORD_CHANNEL_ID}
            TTN_TENANT: ${TTN_TENANT}
            TTN_APPLICATION_ID: ${TTN_APPLICATION_ID}
            TTN_DEVICE_ID: ${TTN_DEVICE_ID}
            MQTT_PASSWORD: ${MQTT_PASSWORD}
            TWILIO_SID: ${TWILIO_SID}
            TWILIO_TOKEN: ${TWILIO_TOKEN}
            TWILIO_ORIGIN_NUMBER: ${TWILIO_ORIGIN_NUMBER}
            TWILIO_DESTINATION_NUMBER: ${TWILIO_DESTINATION_NUMBER}
        restart: always
